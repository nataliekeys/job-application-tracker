{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"rowSpacing\", \"spacing\", \"wrap\", \"zeroMinWidth\"]; // A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useTheme from '../styles/useTheme';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\n\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n\n    if (!size) {\n      return globalStyles;\n    }\n\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      } // Keep 7 significant numbers.\n\n\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      } // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n\n      styles = _extends({\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width\n      }, more);\n    } // No need for a media query for the first size.\n\n\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n\n    return output;\n  });\n}\n/**\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\n * @returns [xs, sm]\n */\n\nfunction extractZeroValueBreakpointKeys({\n  breakpoints,\n  values\n}) {\n  let nonZeroKey = '';\n  Object.keys(values).forEach(key => {\n    if (nonZeroKey !== '') {\n      return;\n    }\n\n    if (values[key] !== 0) {\n      nonZeroKey = key;\n    }\n  });\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\n    return breakpoints[a] - breakpoints[b];\n  });\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\n}\n\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n\n    if (typeof rowSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: rowSpacingValues\n      });\n    }\n\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      if (zeroValueBreakpointKeys.includes(breakpoint)) {\n        return {};\n      }\n\n      return {\n        marginTop: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingTop: 0\n        }\n      };\n    });\n  }\n\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n\n    if (typeof columnSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: columnSpacingValues\n      });\n    }\n\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      if (zeroValueBreakpointKeys.includes(breakpoint)) {\n        return {};\n      }\n\n      return {\n        width: '100%',\n        marginLeft: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingLeft: 0\n        }\n      };\n    });\n  }\n\n  return styles;\n}\nexport function resolveSpacingStyles(spacing, breakpoints, styles = {}) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  } // in case of string/number `spacing`\n\n\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`]];\n  } // in case of object `spacing`\n\n\n  const spacingStyles = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n\n    if (Number(value) > 0) {\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\n    }\n  });\n  return spacingStyles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      container,\n      direction,\n      item,\n      spacing,\n      wrap,\n      zeroMinWidth,\n      breakpoints\n    } = ownerState;\n    let spacingStyles = []; // in case of grid item\n\n    if (container) {\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\n    }\n\n    const breakpointsStyles = [];\n    breakpoints.forEach(breakpoint => {\n      const value = ownerState[breakpoint];\n\n      if (value) {\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\n      }\n    });\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\n  }\n})(({\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box'\n}, ownerState.container && {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '100%'\n}, ownerState.item && {\n  margin: 0 // For instance, it's useful when used with a `figure` element.\n\n}, ownerState.zeroMinWidth && {\n  minWidth: 0\n}, ownerState.wrap !== 'wrap' && {\n  flexWrap: ownerState.wrap\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\nexport function resolveSpacingClasses(spacing, breakpoints) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  } // in case of string/number `spacing`\n\n\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [`spacing-xs-${String(spacing)}`];\n  } // in case of object `spacing`\n\n\n  const classes = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n\n    if (Number(value) > 0) {\n      const className = `spacing-${breakpoint}-${String(value)}`;\n      classes.push(className);\n    }\n  });\n  return classes;\n}\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    breakpoints\n  } = ownerState;\n  let spacingClasses = []; // in case of grid item\n\n  if (container) {\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\n  }\n\n  const breakpointsClasses = [];\n  breakpoints.forEach(breakpoint => {\n    const value = ownerState[breakpoint];\n\n    if (value) {\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\n    }\n  });\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const props = extendSxProp(themeProps);\n\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    rowSpacing: rowSpacingProp,\n    spacing = 0,\n    wrap = 'wrap',\n    zeroMinWidth = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext); // columns set with default breakpoint unit of 12\n\n  const columns = container ? columnsProp || 12 : columnsContext;\n  const breakpointsValues = {};\n\n  const otherFiltered = _extends({}, other);\n\n  breakpoints.keys.forEach(breakpoint => {\n    if (other[breakpoint] != null) {\n      breakpointsValues[breakpoint] = other[breakpoint];\n      delete otherFiltered[breakpoint];\n    }\n  });\n\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    zeroMinWidth,\n    spacing\n  }, breakpointsValues, {\n    breakpoints: breakpoints.keys\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, _extends({\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref\n    }, otherFiltered))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat\n\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default Grid;","map":{"version":3,"sources":["C:/Users/natal/node_modules/@mui/material/Grid/Grid.js"],"names":["_objectWithoutPropertiesLoose","_extends","_excluded","React","PropTypes","clsx","unstable_extendSxProp","extendSxProp","handleBreakpoints","unstable_resolveBreakpointValues","resolveBreakpointValues","unstable_composeClasses","composeClasses","requirePropFactory","styled","useThemeProps","useTheme","GridContext","gridClasses","getGridUtilityClass","jsx","_jsx","getOffset","val","parse","parseFloat","String","replace","generateGrid","theme","ownerState","size","breakpoints","keys","reduce","globalStyles","breakpoint","styles","flexBasis","flexGrow","maxWidth","flexShrink","width","columnsBreakpointValues","values","columns","columnValue","undefined","Math","round","more","container","item","columnSpacing","themeSpacing","spacing","fullWidth","Object","assign","up","generateDirection","directionValues","direction","propValue","output","flexDirection","indexOf","extractZeroValueBreakpointKeys","nonZeroKey","forEach","key","sortedBreakpointKeysByValue","sort","a","b","slice","generateRowGap","rowSpacing","rowSpacingValues","zeroValueBreakpointKeys","marginTop","paddingTop","includes","generateColumnGap","columnSpacingValues","marginLeft","paddingLeft","resolveSpacingStyles","Number","isNaN","spacingStyles","value","push","GridRoot","name","slot","overridesResolver","props","wrap","zeroMinWidth","breakpointsStyles","root","boxSizing","display","flexWrap","margin","minWidth","resolveSpacingClasses","classes","className","useUtilityClasses","spacingClasses","breakpointsClasses","slots","Grid","forwardRef","inProps","ref","themeProps","columnsProp","columnSpacingProp","component","rowSpacingProp","other","columnsContext","useContext","breakpointsValues","otherFiltered","Provider","children","as","process","env","NODE_ENV","propTypes","node","object","string","oneOfType","arrayOf","number","elementType","bool","oneOf","lg","md","sm","sx","func","xl","xs","requireProp"],"mappings":"AAAA,OAAOA,6BAAP,MAA0C,yDAA1C;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,MAAMC,SAAS,GAAG,CAAC,WAAD,EAAc,SAAd,EAAyB,eAAzB,EAA0C,WAA1C,EAAuD,WAAvD,EAAoE,WAApE,EAAiF,MAAjF,EAAyF,YAAzF,EAAuG,SAAvG,EAAkH,MAAlH,EAA0H,cAA1H,CAAlB,C,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,SAASC,qBAAqB,IAAIC,YAAlC,EAAgDC,iBAAhD,EAAmEC,gCAAgC,IAAIC,uBAAvG,QAAsI,aAAtI;AACA,SAASC,uBAAuB,IAAIC,cAApC,QAA0D,WAA1D;AACA,OAAOC,kBAAP,MAA+B,6BAA/B;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,IAAsBC,mBAAtB,QAAiD,eAAjD;AACA,SAASC,GAAG,IAAIC,IAAhB,QAA4B,mBAA5B;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,QAAMC,KAAK,GAAGC,UAAU,CAACF,GAAD,CAAxB;AACA,SAAQ,GAAEC,KAAM,GAAEE,MAAM,CAACH,GAAD,CAAN,CAAYI,OAAZ,CAAoBD,MAAM,CAACF,KAAD,CAA1B,EAAmC,EAAnC,KAA0C,IAAK,EAAjE;AACD;;AAED,OAAO,SAASI,YAAT,CAAsB;AAC3BC,EAAAA,KAD2B;AAE3BC,EAAAA;AAF2B,CAAtB,EAGJ;AACD,MAAIC,IAAJ;AACA,SAAOF,KAAK,CAACG,WAAN,CAAkBC,IAAlB,CAAuBC,MAAvB,CAA8B,CAACC,YAAD,EAAeC,UAAf,KAA8B;AACjE;AACA,QAAIC,MAAM,GAAG,EAAb;;AAEA,QAAIP,UAAU,CAACM,UAAD,CAAd,EAA4B;AAC1BL,MAAAA,IAAI,GAAGD,UAAU,CAACM,UAAD,CAAjB;AACD;;AAED,QAAI,CAACL,IAAL,EAAW;AACT,aAAOI,YAAP;AACD;;AAED,QAAIJ,IAAI,KAAK,IAAb,EAAmB;AACjB;AACAM,MAAAA,MAAM,GAAG;AACPC,QAAAA,SAAS,EAAE,CADJ;AAEPC,QAAAA,QAAQ,EAAE,CAFH;AAGPC,QAAAA,QAAQ,EAAE;AAHH,OAAT;AAKD,KAPD,MAOO,IAAIT,IAAI,KAAK,MAAb,EAAqB;AAC1BM,MAAAA,MAAM,GAAG;AACPC,QAAAA,SAAS,EAAE,MADJ;AAEPC,QAAAA,QAAQ,EAAE,CAFH;AAGPE,QAAAA,UAAU,EAAE,CAHL;AAIPD,QAAAA,QAAQ,EAAE,MAJH;AAKPE,QAAAA,KAAK,EAAE;AALA,OAAT;AAOD,KARM,MAQA;AACL,YAAMC,uBAAuB,GAAGjC,uBAAuB,CAAC;AACtDkC,QAAAA,MAAM,EAAEd,UAAU,CAACe,OADmC;AAEtDb,QAAAA,WAAW,EAAEH,KAAK,CAACG,WAAN,CAAkBY;AAFuB,OAAD,CAAvD;AAIA,YAAME,WAAW,GAAG,OAAOH,uBAAP,KAAmC,QAAnC,GAA8CA,uBAAuB,CAACP,UAAD,CAArE,GAAoFO,uBAAxG;;AAEA,UAAIG,WAAW,KAAKC,SAAhB,IAA6BD,WAAW,KAAK,IAAjD,EAAuD;AACrD,eAAOX,YAAP;AACD,OATI,CASH;;;AAGF,YAAMO,KAAK,GAAI,GAAEM,IAAI,CAACC,KAAL,CAAWlB,IAAI,GAAGe,WAAP,GAAqB,IAAhC,IAAwC,IAAK,GAA9D;AACA,UAAII,IAAI,GAAG,EAAX;;AAEA,UAAIpB,UAAU,CAACqB,SAAX,IAAwBrB,UAAU,CAACsB,IAAnC,IAA2CtB,UAAU,CAACuB,aAAX,KAA6B,CAA5E,EAA+E;AAC7E,cAAMC,YAAY,GAAGzB,KAAK,CAAC0B,OAAN,CAAczB,UAAU,CAACuB,aAAzB,CAArB;;AAEA,YAAIC,YAAY,KAAK,KAArB,EAA4B;AAC1B,gBAAME,SAAS,GAAI,QAAOd,KAAM,MAAKpB,SAAS,CAACgC,YAAD,CAAe,GAA7D;AACAJ,UAAAA,IAAI,GAAG;AACLZ,YAAAA,SAAS,EAAEkB,SADN;AAELhB,YAAAA,QAAQ,EAAEgB;AAFL,WAAP;AAID;AACF,OAzBI,CAyBH;AACF;;;AAGAnB,MAAAA,MAAM,GAAGpC,QAAQ,CAAC;AAChBqC,QAAAA,SAAS,EAAEI,KADK;AAEhBH,QAAAA,QAAQ,EAAE,CAFM;AAGhBC,QAAAA,QAAQ,EAAEE;AAHM,OAAD,EAIdQ,IAJc,CAAjB;AAKD,KA7DgE,CA6D/D;;;AAGF,QAAIrB,KAAK,CAACG,WAAN,CAAkBY,MAAlB,CAAyBR,UAAzB,MAAyC,CAA7C,EAAgD;AAC9CqB,MAAAA,MAAM,CAACC,MAAP,CAAcvB,YAAd,EAA4BE,MAA5B;AACD,KAFD,MAEO;AACLF,MAAAA,YAAY,CAACN,KAAK,CAACG,WAAN,CAAkB2B,EAAlB,CAAqBvB,UAArB,CAAD,CAAZ,GAAiDC,MAAjD;AACD;;AAED,WAAOF,YAAP;AACD,GAvEM,EAuEJ,EAvEI,CAAP;AAwED;AACD,OAAO,SAASyB,iBAAT,CAA2B;AAChC/B,EAAAA,KADgC;AAEhCC,EAAAA;AAFgC,CAA3B,EAGJ;AACD,QAAM+B,eAAe,GAAGnD,uBAAuB,CAAC;AAC9CkC,IAAAA,MAAM,EAAEd,UAAU,CAACgC,SAD2B;AAE9C9B,IAAAA,WAAW,EAAEH,KAAK,CAACG,WAAN,CAAkBY;AAFe,GAAD,CAA/C;AAIA,SAAOpC,iBAAiB,CAAC;AACvBqB,IAAAA;AADuB,GAAD,EAErBgC,eAFqB,EAEJE,SAAS,IAAI;AAC/B,UAAMC,MAAM,GAAG;AACbC,MAAAA,aAAa,EAAEF;AADF,KAAf;;AAIA,QAAIA,SAAS,CAACG,OAAV,CAAkB,QAAlB,MAAgC,CAApC,EAAuC;AACrCF,MAAAA,MAAM,CAAE,QAAO9C,WAAW,CAACkC,IAAK,EAA1B,CAAN,GAAqC;AACnCZ,QAAAA,QAAQ,EAAE;AADyB,OAArC;AAGD;;AAED,WAAOwB,MAAP;AACD,GAduB,CAAxB;AAeD;AACD;;;;;;AAMA,SAASG,8BAAT,CAAwC;AACtCnC,EAAAA,WADsC;AAEtCY,EAAAA;AAFsC,CAAxC,EAGG;AACD,MAAIwB,UAAU,GAAG,EAAjB;AACAX,EAAAA,MAAM,CAACxB,IAAP,CAAYW,MAAZ,EAAoByB,OAApB,CAA4BC,GAAG,IAAI;AACjC,QAAIF,UAAU,KAAK,EAAnB,EAAuB;AACrB;AACD;;AAED,QAAIxB,MAAM,CAAC0B,GAAD,CAAN,KAAgB,CAApB,EAAuB;AACrBF,MAAAA,UAAU,GAAGE,GAAb;AACD;AACF,GARD;AASA,QAAMC,2BAA2B,GAAGd,MAAM,CAACxB,IAAP,CAAYD,WAAZ,EAAyBwC,IAAzB,CAA8B,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC1E,WAAO1C,WAAW,CAACyC,CAAD,CAAX,GAAiBzC,WAAW,CAAC0C,CAAD,CAAnC;AACD,GAFmC,CAApC;AAGA,SAAOH,2BAA2B,CAACI,KAA5B,CAAkC,CAAlC,EAAqCJ,2BAA2B,CAACL,OAA5B,CAAoCE,UAApC,CAArC,CAAP;AACD;;AAED,OAAO,SAASQ,cAAT,CAAwB;AAC7B/C,EAAAA,KAD6B;AAE7BC,EAAAA;AAF6B,CAAxB,EAGJ;AACD,QAAM;AACJqB,IAAAA,SADI;AAEJ0B,IAAAA;AAFI,MAGF/C,UAHJ;AAIA,MAAIO,MAAM,GAAG,EAAb;;AAEA,MAAIc,SAAS,IAAI0B,UAAU,KAAK,CAAhC,EAAmC;AACjC,UAAMC,gBAAgB,GAAGpE,uBAAuB,CAAC;AAC/CkC,MAAAA,MAAM,EAAEiC,UADuC;AAE/C7C,MAAAA,WAAW,EAAEH,KAAK,CAACG,WAAN,CAAkBY;AAFgB,KAAD,CAAhD;AAIA,QAAImC,uBAAJ;;AAEA,QAAI,OAAOD,gBAAP,KAA4B,QAAhC,EAA0C;AACxCC,MAAAA,uBAAuB,GAAGZ,8BAA8B,CAAC;AACvDnC,QAAAA,WAAW,EAAEH,KAAK,CAACG,WAAN,CAAkBY,MADwB;AAEvDA,QAAAA,MAAM,EAAEkC;AAF+C,OAAD,CAAxD;AAID;;AAEDzC,IAAAA,MAAM,GAAG7B,iBAAiB,CAAC;AACzBqB,MAAAA;AADyB,KAAD,EAEvBiD,gBAFuB,EAEL,CAACf,SAAD,EAAY3B,UAAZ,KAA2B;AAC9C,YAAMkB,YAAY,GAAGzB,KAAK,CAAC0B,OAAN,CAAcQ,SAAd,CAArB;;AAEA,UAAIT,YAAY,KAAK,KAArB,EAA4B;AAC1B,eAAO;AACL0B,UAAAA,SAAS,EAAG,IAAG1D,SAAS,CAACgC,YAAD,CAAe,EADlC;AAEL,WAAE,QAAOpC,WAAW,CAACkC,IAAK,EAA1B,GAA8B;AAC5B6B,YAAAA,UAAU,EAAE3D,SAAS,CAACgC,YAAD;AADO;AAFzB,SAAP;AAMD;;AAED,UAAIyB,uBAAuB,CAACG,QAAxB,CAAiC9C,UAAjC,CAAJ,EAAkD;AAChD,eAAO,EAAP;AACD;;AAED,aAAO;AACL4C,QAAAA,SAAS,EAAE,CADN;AAEL,SAAE,QAAO9D,WAAW,CAACkC,IAAK,EAA1B,GAA8B;AAC5B6B,UAAAA,UAAU,EAAE;AADgB;AAFzB,OAAP;AAMD,KAxByB,CAA1B;AAyBD;;AAED,SAAO5C,MAAP;AACD;AACD,OAAO,SAAS8C,iBAAT,CAA2B;AAChCtD,EAAAA,KADgC;AAEhCC,EAAAA;AAFgC,CAA3B,EAGJ;AACD,QAAM;AACJqB,IAAAA,SADI;AAEJE,IAAAA;AAFI,MAGFvB,UAHJ;AAIA,MAAIO,MAAM,GAAG,EAAb;;AAEA,MAAIc,SAAS,IAAIE,aAAa,KAAK,CAAnC,EAAsC;AACpC,UAAM+B,mBAAmB,GAAG1E,uBAAuB,CAAC;AAClDkC,MAAAA,MAAM,EAAES,aAD0C;AAElDrB,MAAAA,WAAW,EAAEH,KAAK,CAACG,WAAN,CAAkBY;AAFmB,KAAD,CAAnD;AAIA,QAAImC,uBAAJ;;AAEA,QAAI,OAAOK,mBAAP,KAA+B,QAAnC,EAA6C;AAC3CL,MAAAA,uBAAuB,GAAGZ,8BAA8B,CAAC;AACvDnC,QAAAA,WAAW,EAAEH,KAAK,CAACG,WAAN,CAAkBY,MADwB;AAEvDA,QAAAA,MAAM,EAAEwC;AAF+C,OAAD,CAAxD;AAID;;AAED/C,IAAAA,MAAM,GAAG7B,iBAAiB,CAAC;AACzBqB,MAAAA;AADyB,KAAD,EAEvBuD,mBAFuB,EAEF,CAACrB,SAAD,EAAY3B,UAAZ,KAA2B;AACjD,YAAMkB,YAAY,GAAGzB,KAAK,CAAC0B,OAAN,CAAcQ,SAAd,CAArB;;AAEA,UAAIT,YAAY,KAAK,KAArB,EAA4B;AAC1B,eAAO;AACLZ,UAAAA,KAAK,EAAG,eAAcpB,SAAS,CAACgC,YAAD,CAAe,GADzC;AAEL+B,UAAAA,UAAU,EAAG,IAAG/D,SAAS,CAACgC,YAAD,CAAe,EAFnC;AAGL,WAAE,QAAOpC,WAAW,CAACkC,IAAK,EAA1B,GAA8B;AAC5BkC,YAAAA,WAAW,EAAEhE,SAAS,CAACgC,YAAD;AADM;AAHzB,SAAP;AAOD;;AAED,UAAIyB,uBAAuB,CAACG,QAAxB,CAAiC9C,UAAjC,CAAJ,EAAkD;AAChD,eAAO,EAAP;AACD;;AAED,aAAO;AACLM,QAAAA,KAAK,EAAE,MADF;AAEL2C,QAAAA,UAAU,EAAE,CAFP;AAGL,SAAE,QAAOnE,WAAW,CAACkC,IAAK,EAA1B,GAA8B;AAC5BkC,UAAAA,WAAW,EAAE;AADe;AAHzB,OAAP;AAOD,KA1ByB,CAA1B;AA2BD;;AAED,SAAOjD,MAAP;AACD;AACD,OAAO,SAASkD,oBAAT,CAA8BhC,OAA9B,EAAuCvB,WAAvC,EAAoDK,MAAM,GAAG,EAA7D,EAAiE;AACtE;AACA,MAAI,CAACkB,OAAD,IAAYA,OAAO,IAAI,CAA3B,EAA8B;AAC5B,WAAO,EAAP;AACD,GAJqE,CAIpE;;;AAGF,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACiC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACjC,OAAD,CAAnB,CAAhC,IAAiE,OAAOA,OAAP,KAAmB,QAAxF,EAAkG;AAChG,WAAO,CAAClB,MAAM,CAAE,cAAaX,MAAM,CAAC6B,OAAD,CAAU,EAA/B,CAAP,CAAP;AACD,GATqE,CASpE;;;AAGF,QAAMmC,aAAa,GAAG,EAAtB;AACA1D,EAAAA,WAAW,CAACqC,OAAZ,CAAoBjC,UAAU,IAAI;AAChC,UAAMuD,KAAK,GAAGpC,OAAO,CAACnB,UAAD,CAArB;;AAEA,QAAIoD,MAAM,CAACG,KAAD,CAAN,GAAgB,CAApB,EAAuB;AACrBD,MAAAA,aAAa,CAACE,IAAd,CAAmBvD,MAAM,CAAE,WAAUD,UAAW,IAAGV,MAAM,CAACiE,KAAD,CAAQ,EAAxC,CAAzB;AACD;AACF,GAND;AAOA,SAAOD,aAAP;AACD,C,CAAC;AACF;AACA;AACA;AACA;AACA;;AAEA,MAAMG,QAAQ,GAAG/E,MAAM,CAAC,KAAD,EAAQ;AAC7BgF,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,IAAI,EAAE,MAFuB;AAG7BC,EAAAA,iBAAiB,EAAE,CAACC,KAAD,EAAQ5D,MAAR,KAAmB;AACpC,UAAM;AACJP,MAAAA;AADI,QAEFmE,KAFJ;AAGA,UAAM;AACJ9C,MAAAA,SADI;AAEJW,MAAAA,SAFI;AAGJV,MAAAA,IAHI;AAIJG,MAAAA,OAJI;AAKJ2C,MAAAA,IALI;AAMJC,MAAAA,YANI;AAOJnE,MAAAA;AAPI,QAQFF,UARJ;AASA,QAAI4D,aAAa,GAAG,EAApB,CAboC,CAaZ;;AAExB,QAAIvC,SAAJ,EAAe;AACbuC,MAAAA,aAAa,GAAGH,oBAAoB,CAAChC,OAAD,EAAUvB,WAAV,EAAuBK,MAAvB,CAApC;AACD;;AAED,UAAM+D,iBAAiB,GAAG,EAA1B;AACApE,IAAAA,WAAW,CAACqC,OAAZ,CAAoBjC,UAAU,IAAI;AAChC,YAAMuD,KAAK,GAAG7D,UAAU,CAACM,UAAD,CAAxB;;AAEA,UAAIuD,KAAJ,EAAW;AACTS,QAAAA,iBAAiB,CAACR,IAAlB,CAAuBvD,MAAM,CAAE,QAAOD,UAAW,IAAGV,MAAM,CAACiE,KAAD,CAAQ,EAArC,CAA7B;AACD;AACF,KAND;AAOA,WAAO,CAACtD,MAAM,CAACgE,IAAR,EAAclD,SAAS,IAAId,MAAM,CAACc,SAAlC,EAA6CC,IAAI,IAAIf,MAAM,CAACe,IAA5D,EAAkE+C,YAAY,IAAI9D,MAAM,CAAC8D,YAAzF,EAAuG,GAAGT,aAA1G,EAAyH5B,SAAS,KAAK,KAAd,IAAuBzB,MAAM,CAAE,gBAAeX,MAAM,CAACoC,SAAD,CAAY,EAAnC,CAAtJ,EAA6LoC,IAAI,KAAK,MAAT,IAAmB7D,MAAM,CAAE,WAAUX,MAAM,CAACwE,IAAD,CAAO,EAAzB,CAAtN,EAAmP,GAAGE,iBAAtP,CAAP;AACD;AA/B4B,CAAR,CAAN,CAgCd,CAAC;AACFtE,EAAAA;AADE,CAAD,KAEG7B,QAAQ,CAAC;AACbqG,EAAAA,SAAS,EAAE;AADE,CAAD,EAEXxE,UAAU,CAACqB,SAAX,IAAwB;AACzBoD,EAAAA,OAAO,EAAE,MADgB;AAEzBC,EAAAA,QAAQ,EAAE,MAFe;AAGzB9D,EAAAA,KAAK,EAAE;AAHkB,CAFb,EAMXZ,UAAU,CAACsB,IAAX,IAAmB;AACpBqD,EAAAA,MAAM,EAAE,CADY,CACV;;AADU,CANR,EASX3E,UAAU,CAACqE,YAAX,IAA2B;AAC5BO,EAAAA,QAAQ,EAAE;AADkB,CAThB,EAWX5E,UAAU,CAACoE,IAAX,KAAoB,MAApB,IAA8B;AAC/BM,EAAAA,QAAQ,EAAE1E,UAAU,CAACoE;AADU,CAXnB,CAlCG,EA+CbtC,iBA/Ca,EA+CMgB,cA/CN,EA+CsBO,iBA/CtB,EA+CyCvD,YA/CzC,CAAjB;AAgDA,OAAO,SAAS+E,qBAAT,CAA+BpD,OAA/B,EAAwCvB,WAAxC,EAAqD;AAC1D;AACA,MAAI,CAACuB,OAAD,IAAYA,OAAO,IAAI,CAA3B,EAA8B;AAC5B,WAAO,EAAP;AACD,GAJyD,CAIxD;;;AAGF,MAAI,OAAOA,OAAP,KAAmB,QAAnB,IAA+B,CAACiC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACjC,OAAD,CAAnB,CAAhC,IAAiE,OAAOA,OAAP,KAAmB,QAAxF,EAAkG;AAChG,WAAO,CAAE,cAAa7B,MAAM,CAAC6B,OAAD,CAAU,EAA/B,CAAP;AACD,GATyD,CASxD;;;AAGF,QAAMqD,OAAO,GAAG,EAAhB;AACA5E,EAAAA,WAAW,CAACqC,OAAZ,CAAoBjC,UAAU,IAAI;AAChC,UAAMuD,KAAK,GAAGpC,OAAO,CAACnB,UAAD,CAArB;;AAEA,QAAIoD,MAAM,CAACG,KAAD,CAAN,GAAgB,CAApB,EAAuB;AACrB,YAAMkB,SAAS,GAAI,WAAUzE,UAAW,IAAGV,MAAM,CAACiE,KAAD,CAAQ,EAAzD;AACAiB,MAAAA,OAAO,CAAChB,IAAR,CAAaiB,SAAb;AACD;AACF,GAPD;AAQA,SAAOD,OAAP;AACD;;AAED,MAAME,iBAAiB,GAAGhF,UAAU,IAAI;AACtC,QAAM;AACJ8E,IAAAA,OADI;AAEJzD,IAAAA,SAFI;AAGJW,IAAAA,SAHI;AAIJV,IAAAA,IAJI;AAKJG,IAAAA,OALI;AAMJ2C,IAAAA,IANI;AAOJC,IAAAA,YAPI;AAQJnE,IAAAA;AARI,MASFF,UATJ;AAUA,MAAIiF,cAAc,GAAG,EAArB,CAXsC,CAWb;;AAEzB,MAAI5D,SAAJ,EAAe;AACb4D,IAAAA,cAAc,GAAGJ,qBAAqB,CAACpD,OAAD,EAAUvB,WAAV,CAAtC;AACD;;AAED,QAAMgF,kBAAkB,GAAG,EAA3B;AACAhF,EAAAA,WAAW,CAACqC,OAAZ,CAAoBjC,UAAU,IAAI;AAChC,UAAMuD,KAAK,GAAG7D,UAAU,CAACM,UAAD,CAAxB;;AAEA,QAAIuD,KAAJ,EAAW;AACTqB,MAAAA,kBAAkB,CAACpB,IAAnB,CAAyB,QAAOxD,UAAW,IAAGV,MAAM,CAACiE,KAAD,CAAQ,EAA5D;AACD;AACF,GAND;AAOA,QAAMsB,KAAK,GAAG;AACZZ,IAAAA,IAAI,EAAE,CAAC,MAAD,EAASlD,SAAS,IAAI,WAAtB,EAAmCC,IAAI,IAAI,MAA3C,EAAmD+C,YAAY,IAAI,cAAnE,EAAmF,GAAGY,cAAtF,EAAsGjD,SAAS,KAAK,KAAd,IAAwB,gBAAepC,MAAM,CAACoC,SAAD,CAAY,EAA/J,EAAkKoC,IAAI,KAAK,MAAT,IAAoB,WAAUxE,MAAM,CAACwE,IAAD,CAAO,EAA7M,EAAgN,GAAGc,kBAAnN;AADM,GAAd;AAGA,SAAOpG,cAAc,CAACqG,KAAD,EAAQ9F,mBAAR,EAA6ByF,OAA7B,CAArB;AACD,CA7BD;;AA+BA,MAAMM,IAAI,GAAG,aAAa/G,KAAK,CAACgH,UAAN,CAAiB,SAASD,IAAT,CAAcE,OAAd,EAAuBC,GAAvB,EAA4B;AACrE,QAAMC,UAAU,GAAGvG,aAAa,CAAC;AAC/BkF,IAAAA,KAAK,EAAEmB,OADwB;AAE/BtB,IAAAA,IAAI,EAAE;AAFyB,GAAD,CAAhC;AAIA,QAAM;AACJ9D,IAAAA;AADI,MAEFhB,QAAQ,EAFZ;AAGA,QAAMiF,KAAK,GAAG1F,YAAY,CAAC+G,UAAD,CAA1B;;AAEA,QAAM;AACJT,IAAAA,SADI;AAEJhE,IAAAA,OAAO,EAAE0E,WAFL;AAGJlE,IAAAA,aAAa,EAAEmE,iBAHX;AAIJC,IAAAA,SAAS,GAAG,KAJR;AAKJtE,IAAAA,SAAS,GAAG,KALR;AAMJW,IAAAA,SAAS,GAAG,KANR;AAOJV,IAAAA,IAAI,GAAG,KAPH;AAQJyB,IAAAA,UAAU,EAAE6C,cARR;AASJnE,IAAAA,OAAO,GAAG,CATN;AAUJ2C,IAAAA,IAAI,GAAG,MAVH;AAWJC,IAAAA,YAAY,GAAG;AAXX,MAYFF,KAZJ;AAAA,QAaM0B,KAAK,GAAG3H,6BAA6B,CAACiG,KAAD,EAAQ/F,SAAR,CAb3C;;AAeA,QAAM2E,UAAU,GAAG6C,cAAc,IAAInE,OAArC;AACA,QAAMF,aAAa,GAAGmE,iBAAiB,IAAIjE,OAA3C;AACA,QAAMqE,cAAc,GAAGzH,KAAK,CAAC0H,UAAN,CAAiB5G,WAAjB,CAAvB,CA3BqE,CA2Bf;;AAEtD,QAAM4B,OAAO,GAAGM,SAAS,GAAGoE,WAAW,IAAI,EAAlB,GAAuBK,cAAhD;AACA,QAAME,iBAAiB,GAAG,EAA1B;;AAEA,QAAMC,aAAa,GAAG9H,QAAQ,CAAC,EAAD,EAAK0H,KAAL,CAA9B;;AAEA3F,EAAAA,WAAW,CAACC,IAAZ,CAAiBoC,OAAjB,CAAyBjC,UAAU,IAAI;AACrC,QAAIuF,KAAK,CAACvF,UAAD,CAAL,IAAqB,IAAzB,EAA+B;AAC7B0F,MAAAA,iBAAiB,CAAC1F,UAAD,CAAjB,GAAgCuF,KAAK,CAACvF,UAAD,CAArC;AACA,aAAO2F,aAAa,CAAC3F,UAAD,CAApB;AACD;AACF,GALD;;AAOA,QAAMN,UAAU,GAAG7B,QAAQ,CAAC,EAAD,EAAKgG,KAAL,EAAY;AACrCpD,IAAAA,OADqC;AAErCM,IAAAA,SAFqC;AAGrCW,IAAAA,SAHqC;AAIrCV,IAAAA,IAJqC;AAKrCyB,IAAAA,UALqC;AAMrCxB,IAAAA,aANqC;AAOrC6C,IAAAA,IAPqC;AAQrCC,IAAAA,YARqC;AASrC5C,IAAAA;AATqC,GAAZ,EAUxBuE,iBAVwB,EAUL;AACpB9F,IAAAA,WAAW,EAAEA,WAAW,CAACC;AADL,GAVK,CAA3B;;AAcA,QAAM2E,OAAO,GAAGE,iBAAiB,CAAChF,UAAD,CAAjC;AACA,SAAO,aAAaT,IAAI,CAACJ,WAAW,CAAC+G,QAAb,EAAuB;AAC7CrC,IAAAA,KAAK,EAAE9C,OADsC;AAE7CoF,IAAAA,QAAQ,EAAE,aAAa5G,IAAI,CAACwE,QAAD,EAAW5F,QAAQ,CAAC;AAC7C6B,MAAAA,UAAU,EAAEA,UADiC;AAE7C+E,MAAAA,SAAS,EAAExG,IAAI,CAACuG,OAAO,CAACP,IAAT,EAAeQ,SAAf,CAF8B;AAG7CqB,MAAAA,EAAE,EAAET,SAHyC;AAI7CJ,MAAAA,GAAG,EAAEA;AAJwC,KAAD,EAK3CU,aAL2C,CAAnB;AAFkB,GAAvB,CAAxB;AASD,CAjEyB,CAA1B;AAkEAI,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCnB,IAAI,CAACoB;AAC7C;AADwC,EAEtC;AACA;AACA;AACA;AACA;;AAEA;;;AAGAL,EAAAA,QAAQ,EAAE7H,SAAS,CAACmI,IATpB;;AAWA;;;AAGA3B,EAAAA,OAAO,EAAExG,SAAS,CAACoI,MAdnB;;AAgBA;;;AAGA3B,EAAAA,SAAS,EAAEzG,SAAS,CAACqI,MAnBrB;;AAqBA;;;;AAIA5F,EAAAA,OAAO,EAAEzC,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACuI,OAAV,CAAkBvI,SAAS,CAACwI,MAA5B,CAAD,EAAsCxI,SAAS,CAACwI,MAAhD,EAAwDxI,SAAS,CAACoI,MAAlE,CAApB,CAzBT;;AA2BA;;;;AAIAnF,EAAAA,aAAa,EAAEjD,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACuI,OAAV,CAAkBvI,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACwI,MAAX,EAAmBxI,SAAS,CAACqI,MAA7B,CAApB,CAAlB,CAAD,EAA+ErI,SAAS,CAACwI,MAAzF,EAAiGxI,SAAS,CAACoI,MAA3G,EAAmHpI,SAAS,CAACqI,MAA7H,CAApB,CA/Bf;;AAiCA;;;;AAIAhB,EAAAA,SAAS,EAAErH,SAAS,CAACyI,WArCrB;;AAuCA;;;;;AAKA1F,EAAAA,SAAS,EAAE/C,SAAS,CAAC0I,IA5CrB;;AA8CA;;;;;AAKAhF,EAAAA,SAAS,EAAE1D,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAAC2I,KAAV,CAAgB,CAAC,gBAAD,EAAmB,QAAnB,EAA6B,aAA7B,EAA4C,KAA5C,CAAhB,CAAD,EAAsE3I,SAAS,CAACuI,OAAV,CAAkBvI,SAAS,CAAC2I,KAAV,CAAgB,CAAC,gBAAD,EAAmB,QAAnB,EAA6B,aAA7B,EAA4C,KAA5C,CAAhB,CAAlB,CAAtE,EAA8J3I,SAAS,CAACoI,MAAxK,CAApB,CAnDX;;AAqDA;;;;;AAKApF,EAAAA,IAAI,EAAEhD,SAAS,CAAC0I,IA1DhB;;AA4DA;;;;;;;;;AASAE,EAAAA,EAAE,EAAE5I,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAAC2I,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B3I,SAAS,CAACwI,MAAtC,EAA8CxI,SAAS,CAAC0I,IAAxD,CAApB,CArEJ;;AAuEA;;;;;;;;;AASAG,EAAAA,EAAE,EAAE7I,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAAC2I,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B3I,SAAS,CAACwI,MAAtC,EAA8CxI,SAAS,CAAC0I,IAAxD,CAApB,CAhFJ;;AAkFA;;;;AAIAjE,EAAAA,UAAU,EAAEzE,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACuI,OAAV,CAAkBvI,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACwI,MAAX,EAAmBxI,SAAS,CAACqI,MAA7B,CAApB,CAAlB,CAAD,EAA+ErI,SAAS,CAACwI,MAAzF,EAAiGxI,SAAS,CAACoI,MAA3G,EAAmHpI,SAAS,CAACqI,MAA7H,CAApB,CAtFZ;;AAwFA;;;;;;;;;AASAS,EAAAA,EAAE,EAAE9I,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAAC2I,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B3I,SAAS,CAACwI,MAAtC,EAA8CxI,SAAS,CAAC0I,IAAxD,CAApB,CAjGJ;;AAmGA;;;;;AAKAvF,EAAAA,OAAO,EAAEnD,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACuI,OAAV,CAAkBvI,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACwI,MAAX,EAAmBxI,SAAS,CAACqI,MAA7B,CAApB,CAAlB,CAAD,EAA+ErI,SAAS,CAACwI,MAAzF,EAAiGxI,SAAS,CAACoI,MAA3G,EAAmHpI,SAAS,CAACqI,MAA7H,CAApB,CAxGT;;AA0GA;;;AAGAU,EAAAA,EAAE,EAAE/I,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACuI,OAAV,CAAkBvI,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAACgJ,IAAX,EAAiBhJ,SAAS,CAACoI,MAA3B,EAAmCpI,SAAS,CAAC0I,IAA7C,CAApB,CAAlB,CAAD,EAA6F1I,SAAS,CAACgJ,IAAvG,EAA6GhJ,SAAS,CAACoI,MAAvH,CAApB,CA7GJ;;AA+GA;;;;;AAKAtC,EAAAA,IAAI,EAAE9F,SAAS,CAAC2I,KAAV,CAAgB,CAAC,QAAD,EAAW,cAAX,EAA2B,MAA3B,CAAhB,CApHN;;AAsHA;;;;;;;;;AASAM,EAAAA,EAAE,EAAEjJ,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAAC2I,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B3I,SAAS,CAACwI,MAAtC,EAA8CxI,SAAS,CAAC0I,IAAxD,CAApB,CA/HJ;;AAiIA;;;;;;;;;AASAQ,EAAAA,EAAE,EAAElJ,SAAS,CAACsI,SAAV,CAAoB,CAACtI,SAAS,CAAC2I,KAAV,CAAgB,CAAC,MAAD,CAAhB,CAAD,EAA4B3I,SAAS,CAACwI,MAAtC,EAA8CxI,SAAS,CAAC0I,IAAxD,CAApB,CA1IJ;;AA4IA;;;;;AAKA3C,EAAAA,YAAY,EAAE/F,SAAS,CAAC0I;AAjJxB,CAFF,GAoJI,KAAK,CApJT;;AAsJA,IAAIX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,QAAMkB,WAAW,GAAG1I,kBAAkB,CAAC,MAAD,EAASqG,IAAT,CAAtC,CADyC,CACa;;AAEtDA,EAAAA,IAAI,CAAC,cAAc,EAAf,CAAJ,GAAyBjH,QAAQ,CAAC,EAAD,EAAKiH,IAAI,CAACoB,SAAV,EAAqB;AACpDxE,IAAAA,SAAS,EAAEyF,WAAW,CAAC,WAAD,CAD8B;AAEpDP,IAAAA,EAAE,EAAEO,WAAW,CAAC,MAAD,CAFqC;AAGpDN,IAAAA,EAAE,EAAEM,WAAW,CAAC,MAAD,CAHqC;AAIpDL,IAAAA,EAAE,EAAEK,WAAW,CAAC,MAAD,CAJqC;AAKpDhG,IAAAA,OAAO,EAAEgG,WAAW,CAAC,WAAD,CALgC;AAMpDrD,IAAAA,IAAI,EAAEqD,WAAW,CAAC,WAAD,CANmC;AAOpDD,IAAAA,EAAE,EAAEC,WAAW,CAAC,MAAD,CAPqC;AAQpDpD,IAAAA,YAAY,EAAEoD,WAAW,CAAC,MAAD;AAR2B,GAArB,CAAjC;AAUD;;AAED,eAAerC,IAAf","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"className\", \"columns\", \"columnSpacing\", \"component\", \"container\", \"direction\", \"item\", \"rowSpacing\", \"spacing\", \"wrap\", \"zeroMinWidth\"];\n// A grid component using the following libs as inspiration.\n//\n// For the implementation:\n// - https://getbootstrap.com/docs/4.3/layout/grid/\n// - https://github.com/kristoferjoseph/flexboxgrid/blob/master/src/css/flexboxgrid.css\n// - https://github.com/roylee0704/react-flexbox-grid\n// - https://material.angularjs.org/latest/layout/introduction\n//\n// Follow this flexbox Guide to better understand the underlying model:\n// - https://css-tricks.com/snippets/css/a-guide-to-flexbox/\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_extendSxProp as extendSxProp, handleBreakpoints, unstable_resolveBreakpointValues as resolveBreakpointValues } from '@mui/system';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport requirePropFactory from '../utils/requirePropFactory';\nimport styled from '../styles/styled';\nimport useThemeProps from '../styles/useThemeProps';\nimport useTheme from '../styles/useTheme';\nimport GridContext from './GridContext';\nimport gridClasses, { getGridUtilityClass } from './gridClasses';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction getOffset(val) {\n  const parse = parseFloat(val);\n  return `${parse}${String(val).replace(String(parse), '') || 'px'}`;\n}\n\nexport function generateGrid({\n  theme,\n  ownerState\n}) {\n  let size;\n  return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {\n    // Use side effect over immutability for better performance.\n    let styles = {};\n\n    if (ownerState[breakpoint]) {\n      size = ownerState[breakpoint];\n    }\n\n    if (!size) {\n      return globalStyles;\n    }\n\n    if (size === true) {\n      // For the auto layouting\n      styles = {\n        flexBasis: 0,\n        flexGrow: 1,\n        maxWidth: '100%'\n      };\n    } else if (size === 'auto') {\n      styles = {\n        flexBasis: 'auto',\n        flexGrow: 0,\n        flexShrink: 0,\n        maxWidth: 'none',\n        width: 'auto'\n      };\n    } else {\n      const columnsBreakpointValues = resolveBreakpointValues({\n        values: ownerState.columns,\n        breakpoints: theme.breakpoints.values\n      });\n      const columnValue = typeof columnsBreakpointValues === 'object' ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;\n\n      if (columnValue === undefined || columnValue === null) {\n        return globalStyles;\n      } // Keep 7 significant numbers.\n\n\n      const width = `${Math.round(size / columnValue * 10e7) / 10e5}%`;\n      let more = {};\n\n      if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {\n        const themeSpacing = theme.spacing(ownerState.columnSpacing);\n\n        if (themeSpacing !== '0px') {\n          const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;\n          more = {\n            flexBasis: fullWidth,\n            maxWidth: fullWidth\n          };\n        }\n      } // Close to the bootstrap implementation:\n      // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41\n\n\n      styles = _extends({\n        flexBasis: width,\n        flexGrow: 0,\n        maxWidth: width\n      }, more);\n    } // No need for a media query for the first size.\n\n\n    if (theme.breakpoints.values[breakpoint] === 0) {\n      Object.assign(globalStyles, styles);\n    } else {\n      globalStyles[theme.breakpoints.up(breakpoint)] = styles;\n    }\n\n    return globalStyles;\n  }, {});\n}\nexport function generateDirection({\n  theme,\n  ownerState\n}) {\n  const directionValues = resolveBreakpointValues({\n    values: ownerState.direction,\n    breakpoints: theme.breakpoints.values\n  });\n  return handleBreakpoints({\n    theme\n  }, directionValues, propValue => {\n    const output = {\n      flexDirection: propValue\n    };\n\n    if (propValue.indexOf('column') === 0) {\n      output[`& > .${gridClasses.item}`] = {\n        maxWidth: 'none'\n      };\n    }\n\n    return output;\n  });\n}\n/**\n * Extracts zero value breakpoint keys before a non-zero value breakpoint key.\n * @example { xs: 0, sm: 0, md: 2, lg: 0, xl: 0 } or [0, 0, 2, 0, 0]\n * @returns [xs, sm]\n */\n\nfunction extractZeroValueBreakpointKeys({\n  breakpoints,\n  values\n}) {\n  let nonZeroKey = '';\n  Object.keys(values).forEach(key => {\n    if (nonZeroKey !== '') {\n      return;\n    }\n\n    if (values[key] !== 0) {\n      nonZeroKey = key;\n    }\n  });\n  const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {\n    return breakpoints[a] - breakpoints[b];\n  });\n  return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));\n}\n\nexport function generateRowGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    rowSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && rowSpacing !== 0) {\n    const rowSpacingValues = resolveBreakpointValues({\n      values: rowSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n\n    if (typeof rowSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: rowSpacingValues\n      });\n    }\n\n    styles = handleBreakpoints({\n      theme\n    }, rowSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          marginTop: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingTop: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      if (zeroValueBreakpointKeys.includes(breakpoint)) {\n        return {};\n      }\n\n      return {\n        marginTop: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingTop: 0\n        }\n      };\n    });\n  }\n\n  return styles;\n}\nexport function generateColumnGap({\n  theme,\n  ownerState\n}) {\n  const {\n    container,\n    columnSpacing\n  } = ownerState;\n  let styles = {};\n\n  if (container && columnSpacing !== 0) {\n    const columnSpacingValues = resolveBreakpointValues({\n      values: columnSpacing,\n      breakpoints: theme.breakpoints.values\n    });\n    let zeroValueBreakpointKeys;\n\n    if (typeof columnSpacingValues === 'object') {\n      zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({\n        breakpoints: theme.breakpoints.values,\n        values: columnSpacingValues\n      });\n    }\n\n    styles = handleBreakpoints({\n      theme\n    }, columnSpacingValues, (propValue, breakpoint) => {\n      const themeSpacing = theme.spacing(propValue);\n\n      if (themeSpacing !== '0px') {\n        return {\n          width: `calc(100% + ${getOffset(themeSpacing)})`,\n          marginLeft: `-${getOffset(themeSpacing)}`,\n          [`& > .${gridClasses.item}`]: {\n            paddingLeft: getOffset(themeSpacing)\n          }\n        };\n      }\n\n      if (zeroValueBreakpointKeys.includes(breakpoint)) {\n        return {};\n      }\n\n      return {\n        width: '100%',\n        marginLeft: 0,\n        [`& > .${gridClasses.item}`]: {\n          paddingLeft: 0\n        }\n      };\n    });\n  }\n\n  return styles;\n}\nexport function resolveSpacingStyles(spacing, breakpoints, styles = {}) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  } // in case of string/number `spacing`\n\n\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [styles[`spacing-xs-${String(spacing)}`]];\n  } // in case of object `spacing`\n\n\n  const spacingStyles = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n\n    if (Number(value) > 0) {\n      spacingStyles.push(styles[`spacing-${breakpoint}-${String(value)}`]);\n    }\n  });\n  return spacingStyles;\n} // Default CSS values\n// flex: '0 1 auto',\n// flexDirection: 'row',\n// alignItems: 'flex-start',\n// flexWrap: 'nowrap',\n// justifyContent: 'flex-start',\n\nconst GridRoot = styled('div', {\n  name: 'MuiGrid',\n  slot: 'Root',\n  overridesResolver: (props, styles) => {\n    const {\n      ownerState\n    } = props;\n    const {\n      container,\n      direction,\n      item,\n      spacing,\n      wrap,\n      zeroMinWidth,\n      breakpoints\n    } = ownerState;\n    let spacingStyles = []; // in case of grid item\n\n    if (container) {\n      spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles);\n    }\n\n    const breakpointsStyles = [];\n    breakpoints.forEach(breakpoint => {\n      const value = ownerState[breakpoint];\n\n      if (value) {\n        breakpointsStyles.push(styles[`grid-${breakpoint}-${String(value)}`]);\n      }\n    });\n    return [styles.root, container && styles.container, item && styles.item, zeroMinWidth && styles.zeroMinWidth, ...spacingStyles, direction !== 'row' && styles[`direction-xs-${String(direction)}`], wrap !== 'wrap' && styles[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];\n  }\n})(({\n  ownerState\n}) => _extends({\n  boxSizing: 'border-box'\n}, ownerState.container && {\n  display: 'flex',\n  flexWrap: 'wrap',\n  width: '100%'\n}, ownerState.item && {\n  margin: 0 // For instance, it's useful when used with a `figure` element.\n\n}, ownerState.zeroMinWidth && {\n  minWidth: 0\n}, ownerState.wrap !== 'wrap' && {\n  flexWrap: ownerState.wrap\n}), generateDirection, generateRowGap, generateColumnGap, generateGrid);\nexport function resolveSpacingClasses(spacing, breakpoints) {\n  // undefined/null or `spacing` <= 0\n  if (!spacing || spacing <= 0) {\n    return [];\n  } // in case of string/number `spacing`\n\n\n  if (typeof spacing === 'string' && !Number.isNaN(Number(spacing)) || typeof spacing === 'number') {\n    return [`spacing-xs-${String(spacing)}`];\n  } // in case of object `spacing`\n\n\n  const classes = [];\n  breakpoints.forEach(breakpoint => {\n    const value = spacing[breakpoint];\n\n    if (Number(value) > 0) {\n      const className = `spacing-${breakpoint}-${String(value)}`;\n      classes.push(className);\n    }\n  });\n  return classes;\n}\n\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    container,\n    direction,\n    item,\n    spacing,\n    wrap,\n    zeroMinWidth,\n    breakpoints\n  } = ownerState;\n  let spacingClasses = []; // in case of grid item\n\n  if (container) {\n    spacingClasses = resolveSpacingClasses(spacing, breakpoints);\n  }\n\n  const breakpointsClasses = [];\n  breakpoints.forEach(breakpoint => {\n    const value = ownerState[breakpoint];\n\n    if (value) {\n      breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);\n    }\n  });\n  const slots = {\n    root: ['root', container && 'container', item && 'item', zeroMinWidth && 'zeroMinWidth', ...spacingClasses, direction !== 'row' && `direction-xs-${String(direction)}`, wrap !== 'wrap' && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]\n  };\n  return composeClasses(slots, getGridUtilityClass, classes);\n};\n\nconst Grid = /*#__PURE__*/React.forwardRef(function Grid(inProps, ref) {\n  const themeProps = useThemeProps({\n    props: inProps,\n    name: 'MuiGrid'\n  });\n  const {\n    breakpoints\n  } = useTheme();\n  const props = extendSxProp(themeProps);\n\n  const {\n    className,\n    columns: columnsProp,\n    columnSpacing: columnSpacingProp,\n    component = 'div',\n    container = false,\n    direction = 'row',\n    item = false,\n    rowSpacing: rowSpacingProp,\n    spacing = 0,\n    wrap = 'wrap',\n    zeroMinWidth = false\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, _excluded);\n\n  const rowSpacing = rowSpacingProp || spacing;\n  const columnSpacing = columnSpacingProp || spacing;\n  const columnsContext = React.useContext(GridContext); // columns set with default breakpoint unit of 12\n\n  const columns = container ? columnsProp || 12 : columnsContext;\n  const breakpointsValues = {};\n\n  const otherFiltered = _extends({}, other);\n\n  breakpoints.keys.forEach(breakpoint => {\n    if (other[breakpoint] != null) {\n      breakpointsValues[breakpoint] = other[breakpoint];\n      delete otherFiltered[breakpoint];\n    }\n  });\n\n  const ownerState = _extends({}, props, {\n    columns,\n    container,\n    direction,\n    item,\n    rowSpacing,\n    columnSpacing,\n    wrap,\n    zeroMinWidth,\n    spacing\n  }, breakpointsValues, {\n    breakpoints: breakpoints.keys\n  });\n\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsx(GridContext.Provider, {\n    value: columns,\n    children: /*#__PURE__*/_jsx(GridRoot, _extends({\n      ownerState: ownerState,\n      className: clsx(classes.root, className),\n      as: component,\n      ref: ref\n    }, otherFiltered))\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? Grid.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The number of columns.\n   * @default 12\n   */\n  columns: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.number), PropTypes.number, PropTypes.object]),\n\n  /**\n   * Defines the horizontal space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  columnSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n\n  /**\n   * If `true`, the component will have the flex *container* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  container: PropTypes.bool,\n\n  /**\n   * Defines the `flex-direction` style property.\n   * It is applied for all screen sizes.\n   * @default 'row'\n   */\n  direction: PropTypes.oneOfType([PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row']), PropTypes.arrayOf(PropTypes.oneOf(['column-reverse', 'column', 'row-reverse', 'row'])), PropTypes.object]),\n\n  /**\n   * If `true`, the component will have the flex *item* behavior.\n   * You should be wrapping *items* with a *container*.\n   * @default false\n   */\n  item: PropTypes.bool,\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `lg` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  lg: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `md` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  md: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the vertical space between the type `item` components.\n   * It overrides the value of the `spacing` prop.\n   */\n  rowSpacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `sm` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  sm: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * Defines the space between the type `item` components.\n   * It can only be used on a type `container` component.\n   * @default 0\n   */\n  spacing: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string])), PropTypes.number, PropTypes.object, PropTypes.string]),\n\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object]),\n\n  /**\n   * Defines the `flex-wrap` style property.\n   * It's applied for all screen sizes.\n   * @default 'wrap'\n   */\n  wrap: PropTypes.oneOf(['nowrap', 'wrap-reverse', 'wrap']),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for the `xl` breakpoint and wider screens if not overridden.\n   * @default false\n   */\n  xl: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If a number, it sets the number of columns the grid item uses.\n   * It can't be greater than the total number of columns of the container (12 by default).\n   * If 'auto', the grid item's width matches its content.\n   * If false, the prop is ignored.\n   * If true, the grid item's width grows to use the space available in the grid container.\n   * The value is applied for all the screen sizes with the lowest priority.\n   * @default false\n   */\n  xs: PropTypes.oneOfType([PropTypes.oneOf(['auto']), PropTypes.number, PropTypes.bool]),\n\n  /**\n   * If `true`, it sets `min-width: 0` on the item.\n   * Refer to the limitations section of the documentation to better understand the use case.\n   * @default false\n   */\n  zeroMinWidth: PropTypes.bool\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  const requireProp = requirePropFactory('Grid', Grid); // eslint-disable-next-line no-useless-concat\n\n  Grid['propTypes' + ''] = _extends({}, Grid.propTypes, {\n    direction: requireProp('container'),\n    lg: requireProp('item'),\n    md: requireProp('item'),\n    sm: requireProp('item'),\n    spacing: requireProp('container'),\n    wrap: requireProp('container'),\n    xs: requireProp('item'),\n    zeroMinWidth: requireProp('item')\n  });\n}\n\nexport default Grid;"]},"metadata":{},"sourceType":"module"}